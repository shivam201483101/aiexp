MIN MAX ALGORITHM

#include <iostream>
using namespace std;

// Function of minmax algorithm will return the maximum value the Maximizer can get when both players play optimally.
int minmax(bool maximizer, int finalStates[], int l, int r)
{
    // If we are on the leaf of the tree. Return the statistical value.
    if (l == r)
    {
        return finalStates[l];
    }

    // Find the middle of the states.
    int mid = (l + r) / 2;

    // If it's Maximizers turn, we have to find the maximum value.
    if (maximizer)
    {
        return max(minmax(false, finalStates, l, mid), minmax(false, finalStates, mid + 1, r));
    }

    // If it's Minimizers turn Minimum value is returned.
    return min(minmax(true, finalStates, l, mid), minmax(true, finalStates, mid + 1, r));
}

int main()
{
    int n;
    cout << "Enter the number of final states N, where ( N = 2^x ) :";
    cin >> n;
    cout << "Enter the final states : \n";
    int finalStates[n];
    for (int i = 0; i < n; i++)
    {
        cin >> finalStates[i];
    }

    int ans = minmax(true, finalStates, 0, n - 1);

    cout << " Best The Maximizer can get : " << ans << endl;

    return 0;
}

OUTPUT:
Enter the number of final states N, where ( N = 2^x ) :8
Enter the final states : 
-2 3 5 12 9 8 -7 -3
 Best The Maximizer can get : 3
